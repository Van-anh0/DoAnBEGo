// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/repo/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "doan/pkg/model"
	repo "doan/pkg/repo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockPGInterface is a mock of PGInterface interface.
type MockPGInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPGInterfaceMockRecorder
}

// MockPGInterfaceMockRecorder is the mock recorder for MockPGInterface.
type MockPGInterfaceMockRecorder struct {
	mock *MockPGInterface
}

// NewMockPGInterface creates a new mock instance.
func NewMockPGInterface(ctrl *gomock.Controller) *MockPGInterface {
	mock := &MockPGInterface{ctrl: ctrl}
	mock.recorder = &MockPGInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPGInterface) EXPECT() *MockPGInterfaceMockRecorder {
	return m.recorder
}

// AdminGetListSeat mocks base method.
func (m *MockPGInterface) AdminGetListSeat(ctx context.Context, req model.SeatParams) (*model.ListSeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AdminGetListSeat", ctx, req)
	ret0, _ := ret[0].(*model.ListSeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AdminGetListSeat indicates an expected call of AdminGetListSeat.
func (mr *MockPGInterfaceMockRecorder) AdminGetListSeat(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AdminGetListSeat", reflect.TypeOf((*MockPGInterface)(nil).AdminGetListSeat), ctx, req)
}

// CreateCategory mocks base method.
func (m *MockPGInterface) CreateCategory(ctx context.Context, user *model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockPGInterfaceMockRecorder) CreateCategory(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockPGInterface)(nil).CreateCategory), ctx, user)
}

// CreateCategoryHasProduct mocks base method.
func (m *MockPGInterface) CreateCategoryHasProduct(ctx context.Context, user *model.CategoryHasProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategoryHasProduct", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategoryHasProduct indicates an expected call of CreateCategoryHasProduct.
func (mr *MockPGInterfaceMockRecorder) CreateCategoryHasProduct(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategoryHasProduct", reflect.TypeOf((*MockPGInterface)(nil).CreateCategoryHasProduct), ctx, user)
}

// CreateCinema mocks base method.
func (m *MockPGInterface) CreateCinema(ctx context.Context, user *model.Cinema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCinema", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCinema indicates an expected call of CreateCinema.
func (mr *MockPGInterfaceMockRecorder) CreateCinema(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCinema", reflect.TypeOf((*MockPGInterface)(nil).CreateCinema), ctx, user)
}

// CreateComment mocks base method.
func (m *MockPGInterface) CreateComment(ctx context.Context, user *model.MovieComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPGInterfaceMockRecorder) CreateComment(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPGInterface)(nil).CreateComment), ctx, user)
}

// CreateMetadata mocks base method.
func (m *MockPGInterface) CreateMetadata(ctx context.Context, user *model.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMetadata", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMetadata indicates an expected call of CreateMetadata.
func (mr *MockPGInterfaceMockRecorder) CreateMetadata(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMetadata", reflect.TypeOf((*MockPGInterface)(nil).CreateMetadata), ctx, user)
}

// CreateMovie mocks base method.
func (m *MockPGInterface) CreateMovie(ctx context.Context, user *model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockPGInterfaceMockRecorder) CreateMovie(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockPGInterface)(nil).CreateMovie), ctx, user)
}

// CreateMovieRank mocks base method.
func (m *MockPGInterface) CreateMovieRank(ctx context.Context, user *model.MovieRank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovieRank", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovieRank indicates an expected call of CreateMovieRank.
func (mr *MockPGInterfaceMockRecorder) CreateMovieRank(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovieRank", reflect.TypeOf((*MockPGInterface)(nil).CreateMovieRank), ctx, user)
}

// CreateMultiOrderItem mocks base method.
func (m *MockPGInterface) CreateMultiOrderItem(ctx context.Context, ob *[]model.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiOrderItem", ctx, ob)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiOrderItem indicates an expected call of CreateMultiOrderItem.
func (mr *MockPGInterfaceMockRecorder) CreateMultiOrderItem(ctx, ob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiOrderItem", reflect.TypeOf((*MockPGInterface)(nil).CreateMultiOrderItem), ctx, ob)
}

// CreateMultiShowSeat mocks base method.
func (m *MockPGInterface) CreateMultiShowSeat(ctx context.Context, ob *[]model.ShowSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMultiShowSeat", ctx, ob)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiShowSeat indicates an expected call of CreateMultiShowSeat.
func (mr *MockPGInterfaceMockRecorder) CreateMultiShowSeat(ctx, ob interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiShowSeat", reflect.TypeOf((*MockPGInterface)(nil).CreateMultiShowSeat), ctx, ob)
}

// CreateOrder mocks base method.
func (m *MockPGInterface) CreateOrder(ctx context.Context, user *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockPGInterfaceMockRecorder) CreateOrder(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockPGInterface)(nil).CreateOrder), ctx, user)
}

// CreateOrderItem mocks base method.
func (m *MockPGInterface) CreateOrderItem(ctx context.Context, user *model.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItem", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderItem indicates an expected call of CreateOrderItem.
func (mr *MockPGInterfaceMockRecorder) CreateOrderItem(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItem", reflect.TypeOf((*MockPGInterface)(nil).CreateOrderItem), ctx, user)
}

// CreateProduct mocks base method.
func (m *MockPGInterface) CreateProduct(ctx context.Context, user *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockPGInterfaceMockRecorder) CreateProduct(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockPGInterface)(nil).CreateProduct), ctx, user)
}

// CreatePromotion mocks base method.
func (m *MockPGInterface) CreatePromotion(ctx context.Context, user *model.Promotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePromotion", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreatePromotion indicates an expected call of CreatePromotion.
func (mr *MockPGInterfaceMockRecorder) CreatePromotion(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePromotion", reflect.TypeOf((*MockPGInterface)(nil).CreatePromotion), ctx, user)
}

// CreateRank mocks base method.
func (m *MockPGInterface) CreateRank(ctx context.Context, user *model.UserRank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRank", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRank indicates an expected call of CreateRank.
func (mr *MockPGInterfaceMockRecorder) CreateRank(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRank", reflect.TypeOf((*MockPGInterface)(nil).CreateRank), ctx, user)
}

// CreateRoom mocks base method.
func (m *MockPGInterface) CreateRoom(ctx context.Context, user *model.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockPGInterfaceMockRecorder) CreateRoom(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockPGInterface)(nil).CreateRoom), ctx, user)
}

// CreateSeat mocks base method.
func (m *MockPGInterface) CreateSeat(ctx context.Context, user *model.Seat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSeat", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSeat indicates an expected call of CreateSeat.
func (mr *MockPGInterfaceMockRecorder) CreateSeat(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSeat", reflect.TypeOf((*MockPGInterface)(nil).CreateSeat), ctx, user)
}

// CreateShowSeat mocks base method.
func (m *MockPGInterface) CreateShowSeat(ctx context.Context, user *model.ShowSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShowSeat", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShowSeat indicates an expected call of CreateShowSeat.
func (mr *MockPGInterfaceMockRecorder) CreateShowSeat(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShowSeat", reflect.TypeOf((*MockPGInterface)(nil).CreateShowSeat), ctx, user)
}

// CreateShowtime mocks base method.
func (m *MockPGInterface) CreateShowtime(ctx context.Context, user *model.Showtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShowtime", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShowtime indicates an expected call of CreateShowtime.
func (mr *MockPGInterfaceMockRecorder) CreateShowtime(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShowtime", reflect.TypeOf((*MockPGInterface)(nil).CreateShowtime), ctx, user)
}

// CreateUser mocks base method.
func (m *MockPGInterface) CreateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockPGInterfaceMockRecorder) CreateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockPGInterface)(nil).CreateUser), ctx, user)
}

// DBWithTimeout mocks base method.
func (m *MockPGInterface) DBWithTimeout(ctx context.Context) (*gorm.DB, context.CancelFunc) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBWithTimeout", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(context.CancelFunc)
	return ret0, ret1
}

// DBWithTimeout indicates an expected call of DBWithTimeout.
func (mr *MockPGInterfaceMockRecorder) DBWithTimeout(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBWithTimeout", reflect.TypeOf((*MockPGInterface)(nil).DBWithTimeout), ctx)
}

// DeleteCategory mocks base method.
func (m *MockPGInterface) DeleteCategory(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockPGInterfaceMockRecorder) DeleteCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockPGInterface)(nil).DeleteCategory), ctx, id)
}

// DeleteCategoryHasProduct mocks base method.
func (m *MockPGInterface) DeleteCategoryHasProduct(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategoryHasProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategoryHasProduct indicates an expected call of DeleteCategoryHasProduct.
func (mr *MockPGInterfaceMockRecorder) DeleteCategoryHasProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategoryHasProduct", reflect.TypeOf((*MockPGInterface)(nil).DeleteCategoryHasProduct), ctx, id)
}

// DeleteCinema mocks base method.
func (m *MockPGInterface) DeleteCinema(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCinema", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCinema indicates an expected call of DeleteCinema.
func (mr *MockPGInterfaceMockRecorder) DeleteCinema(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCinema", reflect.TypeOf((*MockPGInterface)(nil).DeleteCinema), ctx, id)
}

// DeleteComment mocks base method.
func (m *MockPGInterface) DeleteComment(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockPGInterfaceMockRecorder) DeleteComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockPGInterface)(nil).DeleteComment), ctx, id)
}

// DeleteMetadata mocks base method.
func (m *MockPGInterface) DeleteMetadata(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetadata", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMetadata indicates an expected call of DeleteMetadata.
func (mr *MockPGInterfaceMockRecorder) DeleteMetadata(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetadata", reflect.TypeOf((*MockPGInterface)(nil).DeleteMetadata), ctx, id)
}

// DeleteMovie mocks base method.
func (m *MockPGInterface) DeleteMovie(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockPGInterfaceMockRecorder) DeleteMovie(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockPGInterface)(nil).DeleteMovie), ctx, id)
}

// DeleteMovieRank mocks base method.
func (m *MockPGInterface) DeleteMovieRank(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovieRank", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovieRank indicates an expected call of DeleteMovieRank.
func (mr *MockPGInterfaceMockRecorder) DeleteMovieRank(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovieRank", reflect.TypeOf((*MockPGInterface)(nil).DeleteMovieRank), ctx, id)
}

// DeleteOrder mocks base method.
func (m *MockPGInterface) DeleteOrder(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockPGInterfaceMockRecorder) DeleteOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockPGInterface)(nil).DeleteOrder), ctx, id)
}

// DeleteOrderItem mocks base method.
func (m *MockPGInterface) DeleteOrderItem(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrderItem", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrderItem indicates an expected call of DeleteOrderItem.
func (mr *MockPGInterfaceMockRecorder) DeleteOrderItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrderItem", reflect.TypeOf((*MockPGInterface)(nil).DeleteOrderItem), ctx, id)
}

// DeleteProduct mocks base method.
func (m *MockPGInterface) DeleteProduct(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockPGInterfaceMockRecorder) DeleteProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockPGInterface)(nil).DeleteProduct), ctx, id)
}

// DeletePromotion mocks base method.
func (m *MockPGInterface) DeletePromotion(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePromotion", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePromotion indicates an expected call of DeletePromotion.
func (mr *MockPGInterfaceMockRecorder) DeletePromotion(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePromotion", reflect.TypeOf((*MockPGInterface)(nil).DeletePromotion), ctx, id)
}

// DeleteRank mocks base method.
func (m *MockPGInterface) DeleteRank(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRank", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRank indicates an expected call of DeleteRank.
func (mr *MockPGInterfaceMockRecorder) DeleteRank(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRank", reflect.TypeOf((*MockPGInterface)(nil).DeleteRank), ctx, id)
}

// DeleteRoom mocks base method.
func (m *MockPGInterface) DeleteRoom(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRoom", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRoom indicates an expected call of DeleteRoom.
func (mr *MockPGInterfaceMockRecorder) DeleteRoom(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRoom", reflect.TypeOf((*MockPGInterface)(nil).DeleteRoom), ctx, id)
}

// DeleteSeat mocks base method.
func (m *MockPGInterface) DeleteSeat(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSeat", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSeat indicates an expected call of DeleteSeat.
func (mr *MockPGInterfaceMockRecorder) DeleteSeat(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSeat", reflect.TypeOf((*MockPGInterface)(nil).DeleteSeat), ctx, id)
}

// DeleteShowSeat mocks base method.
func (m *MockPGInterface) DeleteShowSeat(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShowSeat", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShowSeat indicates an expected call of DeleteShowSeat.
func (mr *MockPGInterfaceMockRecorder) DeleteShowSeat(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShowSeat", reflect.TypeOf((*MockPGInterface)(nil).DeleteShowSeat), ctx, id)
}

// DeleteShowtime mocks base method.
func (m *MockPGInterface) DeleteShowtime(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShowtime", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShowtime indicates an expected call of DeleteShowtime.
func (mr *MockPGInterfaceMockRecorder) DeleteShowtime(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShowtime", reflect.TypeOf((*MockPGInterface)(nil).DeleteShowtime), ctx, id)
}

// DeleteUser mocks base method.
func (m *MockPGInterface) DeleteUser(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockPGInterfaceMockRecorder) DeleteUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockPGInterface)(nil).DeleteUser), ctx, id)
}

// GetListCategory mocks base method.
func (m *MockPGInterface) GetListCategory(ctx context.Context, req model.CategoryParams) (*model.CategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCategory", ctx, req)
	ret0, _ := ret[0].(*model.CategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCategory indicates an expected call of GetListCategory.
func (mr *MockPGInterfaceMockRecorder) GetListCategory(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCategory", reflect.TypeOf((*MockPGInterface)(nil).GetListCategory), ctx, req)
}

// GetListCategoryHasProduct mocks base method.
func (m *MockPGInterface) GetListCategoryHasProduct(ctx context.Context, req model.CategoryHasProductParams) (*model.CategoryHasProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCategoryHasProduct", ctx, req)
	ret0, _ := ret[0].(*model.CategoryHasProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCategoryHasProduct indicates an expected call of GetListCategoryHasProduct.
func (mr *MockPGInterfaceMockRecorder) GetListCategoryHasProduct(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCategoryHasProduct", reflect.TypeOf((*MockPGInterface)(nil).GetListCategoryHasProduct), ctx, req)
}

// GetListCinema mocks base method.
func (m *MockPGInterface) GetListCinema(ctx context.Context, req model.CinemaParams) (*model.CinemaResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListCinema", ctx, req)
	ret0, _ := ret[0].(*model.CinemaResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListCinema indicates an expected call of GetListCinema.
func (mr *MockPGInterfaceMockRecorder) GetListCinema(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListCinema", reflect.TypeOf((*MockPGInterface)(nil).GetListCinema), ctx, req)
}

// GetListComment mocks base method.
func (m *MockPGInterface) GetListComment(ctx context.Context, req model.MovieCommentParams) (*model.MovieCommentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListComment", ctx, req)
	ret0, _ := ret[0].(*model.MovieCommentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListComment indicates an expected call of GetListComment.
func (mr *MockPGInterfaceMockRecorder) GetListComment(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListComment", reflect.TypeOf((*MockPGInterface)(nil).GetListComment), ctx, req)
}

// GetListMetadata mocks base method.
func (m *MockPGInterface) GetListMetadata(ctx context.Context, req model.MetadataParams) (*model.MetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMetadata", ctx, req)
	ret0, _ := ret[0].(*model.MetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListMetadata indicates an expected call of GetListMetadata.
func (mr *MockPGInterfaceMockRecorder) GetListMetadata(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMetadata", reflect.TypeOf((*MockPGInterface)(nil).GetListMetadata), ctx, req)
}

// GetListMovie mocks base method.
func (m *MockPGInterface) GetListMovie(ctx context.Context, req model.MovieParams) (*model.MovieResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMovie", ctx, req)
	ret0, _ := ret[0].(*model.MovieResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListMovie indicates an expected call of GetListMovie.
func (mr *MockPGInterfaceMockRecorder) GetListMovie(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMovie", reflect.TypeOf((*MockPGInterface)(nil).GetListMovie), ctx, req)
}

// GetListMovieRank mocks base method.
func (m *MockPGInterface) GetListMovieRank(ctx context.Context, req model.MovieRankParams) (*model.MovieRankResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListMovieRank", ctx, req)
	ret0, _ := ret[0].(*model.MovieRankResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListMovieRank indicates an expected call of GetListMovieRank.
func (mr *MockPGInterfaceMockRecorder) GetListMovieRank(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListMovieRank", reflect.TypeOf((*MockPGInterface)(nil).GetListMovieRank), ctx, req)
}

// GetListOrder mocks base method.
func (m *MockPGInterface) GetListOrder(ctx context.Context, req model.OrderParams) (*model.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOrder", ctx, req)
	ret0, _ := ret[0].(*model.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOrder indicates an expected call of GetListOrder.
func (mr *MockPGInterfaceMockRecorder) GetListOrder(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOrder", reflect.TypeOf((*MockPGInterface)(nil).GetListOrder), ctx, req)
}

// GetListOrderItem mocks base method.
func (m *MockPGInterface) GetListOrderItem(ctx context.Context, req model.OrderItemParams) (*model.OrderItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListOrderItem", ctx, req)
	ret0, _ := ret[0].(*model.OrderItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListOrderItem indicates an expected call of GetListOrderItem.
func (mr *MockPGInterfaceMockRecorder) GetListOrderItem(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListOrderItem", reflect.TypeOf((*MockPGInterface)(nil).GetListOrderItem), ctx, req)
}

// GetListProduct mocks base method.
func (m *MockPGInterface) GetListProduct(ctx context.Context, req model.ProductParams) (*model.ListProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListProduct", ctx, req)
	ret0, _ := ret[0].(*model.ListProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListProduct indicates an expected call of GetListProduct.
func (mr *MockPGInterfaceMockRecorder) GetListProduct(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListProduct", reflect.TypeOf((*MockPGInterface)(nil).GetListProduct), ctx, req)
}

// GetListPromotion mocks base method.
func (m *MockPGInterface) GetListPromotion(ctx context.Context, req model.PromotionParams) (*model.PromotionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListPromotion", ctx, req)
	ret0, _ := ret[0].(*model.PromotionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListPromotion indicates an expected call of GetListPromotion.
func (mr *MockPGInterfaceMockRecorder) GetListPromotion(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListPromotion", reflect.TypeOf((*MockPGInterface)(nil).GetListPromotion), ctx, req)
}

// GetListRank mocks base method.
func (m *MockPGInterface) GetListRank(ctx context.Context, req model.RankParams) (*model.RankResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListRank", ctx, req)
	ret0, _ := ret[0].(*model.RankResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListRank indicates an expected call of GetListRank.
func (mr *MockPGInterfaceMockRecorder) GetListRank(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListRank", reflect.TypeOf((*MockPGInterface)(nil).GetListRank), ctx, req)
}

// GetListRoom mocks base method.
func (m *MockPGInterface) GetListRoom(ctx context.Context, req model.RoomParams) (*model.RoomResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListRoom", ctx, req)
	ret0, _ := ret[0].(*model.RoomResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListRoom indicates an expected call of GetListRoom.
func (mr *MockPGInterfaceMockRecorder) GetListRoom(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListRoom", reflect.TypeOf((*MockPGInterface)(nil).GetListRoom), ctx, req)
}

// GetListSeat mocks base method.
func (m *MockPGInterface) GetListSeat(ctx context.Context, req model.SeatParams) (*model.ListSeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListSeat", ctx, req)
	ret0, _ := ret[0].(*model.ListSeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListSeat indicates an expected call of GetListSeat.
func (mr *MockPGInterfaceMockRecorder) GetListSeat(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListSeat", reflect.TypeOf((*MockPGInterface)(nil).GetListSeat), ctx, req)
}

// GetListShowSeat mocks base method.
func (m *MockPGInterface) GetListShowSeat(ctx context.Context, req model.ShowSeatParams) (*model.ListShowSeatResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListShowSeat", ctx, req)
	ret0, _ := ret[0].(*model.ListShowSeatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListShowSeat indicates an expected call of GetListShowSeat.
func (mr *MockPGInterfaceMockRecorder) GetListShowSeat(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListShowSeat", reflect.TypeOf((*MockPGInterface)(nil).GetListShowSeat), ctx, req)
}

// GetListShowtime mocks base method.
func (m *MockPGInterface) GetListShowtime(ctx context.Context, req model.ShowParams) (*model.ShowtimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListShowtime", ctx, req)
	ret0, _ := ret[0].(*model.ShowtimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListShowtime indicates an expected call of GetListShowtime.
func (mr *MockPGInterfaceMockRecorder) GetListShowtime(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListShowtime", reflect.TypeOf((*MockPGInterface)(nil).GetListShowtime), ctx, req)
}

// GetListShowtimeByRoom mocks base method.
func (m *MockPGInterface) GetListShowtimeByRoom(ctx context.Context, req model.ShowParams) (*model.ShowtimeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListShowtimeByRoom", ctx, req)
	ret0, _ := ret[0].(*model.ShowtimeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListShowtimeByRoom indicates an expected call of GetListShowtimeByRoom.
func (mr *MockPGInterfaceMockRecorder) GetListShowtimeByRoom(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListShowtimeByRoom", reflect.TypeOf((*MockPGInterface)(nil).GetListShowtimeByRoom), ctx, req)
}

// GetListUser mocks base method.
func (m *MockPGInterface) GetListUser(ctx context.Context, req model.UserParams) (*model.UserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUser", ctx, req)
	ret0, _ := ret[0].(*model.UserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListUser indicates an expected call of GetListUser.
func (mr *MockPGInterfaceMockRecorder) GetListUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUser", reflect.TypeOf((*MockPGInterface)(nil).GetListUser), ctx, req)
}

// GetOneCategory mocks base method.
func (m *MockPGInterface) GetOneCategory(ctx context.Context, id string) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneCategory", ctx, id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneCategory indicates an expected call of GetOneCategory.
func (mr *MockPGInterfaceMockRecorder) GetOneCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneCategory", reflect.TypeOf((*MockPGInterface)(nil).GetOneCategory), ctx, id)
}

// GetOneCategoryHasProduct mocks base method.
func (m *MockPGInterface) GetOneCategoryHasProduct(ctx context.Context, id string) (*model.CategoryHasProduct, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneCategoryHasProduct", ctx, id)
	ret0, _ := ret[0].(*model.CategoryHasProduct)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneCategoryHasProduct indicates an expected call of GetOneCategoryHasProduct.
func (mr *MockPGInterfaceMockRecorder) GetOneCategoryHasProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneCategoryHasProduct", reflect.TypeOf((*MockPGInterface)(nil).GetOneCategoryHasProduct), ctx, id)
}

// GetOneCinema mocks base method.
func (m *MockPGInterface) GetOneCinema(ctx context.Context, id string) (*model.Cinema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneCinema", ctx, id)
	ret0, _ := ret[0].(*model.Cinema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneCinema indicates an expected call of GetOneCinema.
func (mr *MockPGInterfaceMockRecorder) GetOneCinema(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneCinema", reflect.TypeOf((*MockPGInterface)(nil).GetOneCinema), ctx, id)
}

// GetOneComment mocks base method.
func (m *MockPGInterface) GetOneComment(ctx context.Context, id string) (*model.MovieComment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneComment", ctx, id)
	ret0, _ := ret[0].(*model.MovieComment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneComment indicates an expected call of GetOneComment.
func (mr *MockPGInterfaceMockRecorder) GetOneComment(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneComment", reflect.TypeOf((*MockPGInterface)(nil).GetOneComment), ctx, id)
}

// GetOneMetadata mocks base method.
func (m *MockPGInterface) GetOneMetadata(ctx context.Context, id string) (*model.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneMetadata", ctx, id)
	ret0, _ := ret[0].(*model.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneMetadata indicates an expected call of GetOneMetadata.
func (mr *MockPGInterfaceMockRecorder) GetOneMetadata(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneMetadata", reflect.TypeOf((*MockPGInterface)(nil).GetOneMetadata), ctx, id)
}

// GetOneMovie mocks base method.
func (m *MockPGInterface) GetOneMovie(ctx context.Context, id string) (*model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneMovie", ctx, id)
	ret0, _ := ret[0].(*model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneMovie indicates an expected call of GetOneMovie.
func (mr *MockPGInterfaceMockRecorder) GetOneMovie(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneMovie", reflect.TypeOf((*MockPGInterface)(nil).GetOneMovie), ctx, id)
}

// GetOneMovieRank mocks base method.
func (m *MockPGInterface) GetOneMovieRank(ctx context.Context, id string) (*model.MovieRank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneMovieRank", ctx, id)
	ret0, _ := ret[0].(*model.MovieRank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneMovieRank indicates an expected call of GetOneMovieRank.
func (mr *MockPGInterfaceMockRecorder) GetOneMovieRank(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneMovieRank", reflect.TypeOf((*MockPGInterface)(nil).GetOneMovieRank), ctx, id)
}

// GetOneOrder mocks base method.
func (m *MockPGInterface) GetOneOrder(ctx context.Context, id string) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOrder", ctx, id)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOrder indicates an expected call of GetOneOrder.
func (mr *MockPGInterfaceMockRecorder) GetOneOrder(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOrder", reflect.TypeOf((*MockPGInterface)(nil).GetOneOrder), ctx, id)
}

// GetOneOrderItem mocks base method.
func (m *MockPGInterface) GetOneOrderItem(ctx context.Context, id string) (*model.OrderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneOrderItem", ctx, id)
	ret0, _ := ret[0].(*model.OrderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneOrderItem indicates an expected call of GetOneOrderItem.
func (mr *MockPGInterfaceMockRecorder) GetOneOrderItem(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneOrderItem", reflect.TypeOf((*MockPGInterface)(nil).GetOneOrderItem), ctx, id)
}

// GetOneProduct mocks base method.
func (m *MockPGInterface) GetOneProduct(ctx context.Context, id string) (*model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneProduct", ctx, id)
	ret0, _ := ret[0].(*model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneProduct indicates an expected call of GetOneProduct.
func (mr *MockPGInterfaceMockRecorder) GetOneProduct(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneProduct", reflect.TypeOf((*MockPGInterface)(nil).GetOneProduct), ctx, id)
}

// GetOnePromotion mocks base method.
func (m *MockPGInterface) GetOnePromotion(ctx context.Context, id string) (*model.Promotion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnePromotion", ctx, id)
	ret0, _ := ret[0].(*model.Promotion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnePromotion indicates an expected call of GetOnePromotion.
func (mr *MockPGInterfaceMockRecorder) GetOnePromotion(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnePromotion", reflect.TypeOf((*MockPGInterface)(nil).GetOnePromotion), ctx, id)
}

// GetOneRank mocks base method.
func (m *MockPGInterface) GetOneRank(ctx context.Context, id string) (*model.UserRank, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneRank", ctx, id)
	ret0, _ := ret[0].(*model.UserRank)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneRank indicates an expected call of GetOneRank.
func (mr *MockPGInterfaceMockRecorder) GetOneRank(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneRank", reflect.TypeOf((*MockPGInterface)(nil).GetOneRank), ctx, id)
}

// GetOneRoom mocks base method.
func (m *MockPGInterface) GetOneRoom(ctx context.Context, id string) (*model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneRoom", ctx, id)
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneRoom indicates an expected call of GetOneRoom.
func (mr *MockPGInterfaceMockRecorder) GetOneRoom(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneRoom", reflect.TypeOf((*MockPGInterface)(nil).GetOneRoom), ctx, id)
}

// GetOneSeat mocks base method.
func (m *MockPGInterface) GetOneSeat(ctx context.Context, id string) (*model.Seat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneSeat", ctx, id)
	ret0, _ := ret[0].(*model.Seat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneSeat indicates an expected call of GetOneSeat.
func (mr *MockPGInterfaceMockRecorder) GetOneSeat(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneSeat", reflect.TypeOf((*MockPGInterface)(nil).GetOneSeat), ctx, id)
}

// GetOneShowSeat mocks base method.
func (m *MockPGInterface) GetOneShowSeat(ctx context.Context, id string) (*model.ShowSeat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneShowSeat", ctx, id)
	ret0, _ := ret[0].(*model.ShowSeat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneShowSeat indicates an expected call of GetOneShowSeat.
func (mr *MockPGInterfaceMockRecorder) GetOneShowSeat(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneShowSeat", reflect.TypeOf((*MockPGInterface)(nil).GetOneShowSeat), ctx, id)
}

// GetOneShowtime mocks base method.
func (m *MockPGInterface) GetOneShowtime(ctx context.Context, id string) (*model.Showtime, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneShowtime", ctx, id)
	ret0, _ := ret[0].(*model.Showtime)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneShowtime indicates an expected call of GetOneShowtime.
func (mr *MockPGInterfaceMockRecorder) GetOneShowtime(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneShowtime", reflect.TypeOf((*MockPGInterface)(nil).GetOneShowtime), ctx, id)
}

// GetOneUser mocks base method.
func (m *MockPGInterface) GetOneUser(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneUser", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneUser indicates an expected call of GetOneUser.
func (mr *MockPGInterfaceMockRecorder) GetOneUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneUser", reflect.TypeOf((*MockPGInterface)(nil).GetOneUser), ctx, id)
}

// GetOneUserByEmail mocks base method.
func (m *MockPGInterface) GetOneUserByEmail(ctx context.Context, email string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneUserByEmail", ctx, email)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneUserByEmail indicates an expected call of GetOneUserByEmail.
func (mr *MockPGInterfaceMockRecorder) GetOneUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneUserByEmail", reflect.TypeOf((*MockPGInterface)(nil).GetOneUserByEmail), ctx, email)
}

// GetRepo mocks base method.
func (m *MockPGInterface) GetRepo() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockPGInterfaceMockRecorder) GetRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockPGInterface)(nil).GetRepo))
}

// Transaction mocks base method.
func (m *MockPGInterface) Transaction(ctx context.Context, f func(repo.PGInterface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockPGInterfaceMockRecorder) Transaction(ctx, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockPGInterface)(nil).Transaction), ctx, f)
}

// UpdateCategory mocks base method.
func (m *MockPGInterface) UpdateCategory(ctx context.Context, user *model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockPGInterfaceMockRecorder) UpdateCategory(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockPGInterface)(nil).UpdateCategory), ctx, user)
}

// UpdateCategoryHasProduct mocks base method.
func (m *MockPGInterface) UpdateCategoryHasProduct(ctx context.Context, user *model.CategoryHasProduct) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategoryHasProduct", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategoryHasProduct indicates an expected call of UpdateCategoryHasProduct.
func (mr *MockPGInterfaceMockRecorder) UpdateCategoryHasProduct(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategoryHasProduct", reflect.TypeOf((*MockPGInterface)(nil).UpdateCategoryHasProduct), ctx, user)
}

// UpdateCinema mocks base method.
func (m *MockPGInterface) UpdateCinema(ctx context.Context, user *model.Cinema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCinema", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCinema indicates an expected call of UpdateCinema.
func (mr *MockPGInterfaceMockRecorder) UpdateCinema(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCinema", reflect.TypeOf((*MockPGInterface)(nil).UpdateCinema), ctx, user)
}

// UpdateComment mocks base method.
func (m *MockPGInterface) UpdateComment(ctx context.Context, user *model.MovieComment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockPGInterfaceMockRecorder) UpdateComment(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockPGInterface)(nil).UpdateComment), ctx, user)
}

// UpdateMetadata mocks base method.
func (m *MockPGInterface) UpdateMetadata(ctx context.Context, user *model.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetadata", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMetadata indicates an expected call of UpdateMetadata.
func (mr *MockPGInterfaceMockRecorder) UpdateMetadata(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetadata", reflect.TypeOf((*MockPGInterface)(nil).UpdateMetadata), ctx, user)
}

// UpdateMovie mocks base method.
func (m *MockPGInterface) UpdateMovie(ctx context.Context, user *model.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockPGInterfaceMockRecorder) UpdateMovie(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockPGInterface)(nil).UpdateMovie), ctx, user)
}

// UpdateMovieRank mocks base method.
func (m *MockPGInterface) UpdateMovieRank(ctx context.Context, user *model.MovieRank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovieRank", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovieRank indicates an expected call of UpdateMovieRank.
func (mr *MockPGInterfaceMockRecorder) UpdateMovieRank(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovieRank", reflect.TypeOf((*MockPGInterface)(nil).UpdateMovieRank), ctx, user)
}

// UpdateOrder mocks base method.
func (m *MockPGInterface) UpdateOrder(ctx context.Context, user *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockPGInterfaceMockRecorder) UpdateOrder(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockPGInterface)(nil).UpdateOrder), ctx, user)
}

// UpdateOrderItem mocks base method.
func (m *MockPGInterface) UpdateOrderItem(ctx context.Context, user *model.OrderItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderItem", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderItem indicates an expected call of UpdateOrderItem.
func (mr *MockPGInterfaceMockRecorder) UpdateOrderItem(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderItem", reflect.TypeOf((*MockPGInterface)(nil).UpdateOrderItem), ctx, user)
}

// UpdateProduct mocks base method.
func (m *MockPGInterface) UpdateProduct(ctx context.Context, user *model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockPGInterfaceMockRecorder) UpdateProduct(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockPGInterface)(nil).UpdateProduct), ctx, user)
}

// UpdatePromotion mocks base method.
func (m *MockPGInterface) UpdatePromotion(ctx context.Context, user *model.Promotion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePromotion", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePromotion indicates an expected call of UpdatePromotion.
func (mr *MockPGInterfaceMockRecorder) UpdatePromotion(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePromotion", reflect.TypeOf((*MockPGInterface)(nil).UpdatePromotion), ctx, user)
}

// UpdateRank mocks base method.
func (m *MockPGInterface) UpdateRank(ctx context.Context, user *model.UserRank) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRank", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRank indicates an expected call of UpdateRank.
func (mr *MockPGInterfaceMockRecorder) UpdateRank(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRank", reflect.TypeOf((*MockPGInterface)(nil).UpdateRank), ctx, user)
}

// UpdateRoom mocks base method.
func (m *MockPGInterface) UpdateRoom(ctx context.Context, user *model.Room) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoom", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoom indicates an expected call of UpdateRoom.
func (mr *MockPGInterfaceMockRecorder) UpdateRoom(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoom", reflect.TypeOf((*MockPGInterface)(nil).UpdateRoom), ctx, user)
}

// UpdateSeat mocks base method.
func (m *MockPGInterface) UpdateSeat(ctx context.Context, user *model.Seat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSeat", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSeat indicates an expected call of UpdateSeat.
func (mr *MockPGInterfaceMockRecorder) UpdateSeat(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSeat", reflect.TypeOf((*MockPGInterface)(nil).UpdateSeat), ctx, user)
}

// UpdateShowSeat mocks base method.
func (m *MockPGInterface) UpdateShowSeat(ctx context.Context, user *model.ShowSeat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShowSeat", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShowSeat indicates an expected call of UpdateShowSeat.
func (mr *MockPGInterfaceMockRecorder) UpdateShowSeat(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShowSeat", reflect.TypeOf((*MockPGInterface)(nil).UpdateShowSeat), ctx, user)
}

// UpdateShowtime mocks base method.
func (m *MockPGInterface) UpdateShowtime(ctx context.Context, user *model.Showtime) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShowtime", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShowtime indicates an expected call of UpdateShowtime.
func (mr *MockPGInterfaceMockRecorder) UpdateShowtime(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShowtime", reflect.TypeOf((*MockPGInterface)(nil).UpdateShowtime), ctx, user)
}

// UpdateUser mocks base method.
func (m *MockPGInterface) UpdateUser(ctx context.Context, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockPGInterfaceMockRecorder) UpdateUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockPGInterface)(nil).UpdateUser), ctx, user)
}
